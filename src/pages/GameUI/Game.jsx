import "./Game.css";
import back from "../../assets/images/back.svg";
import rankingbtn from "../../assets/images/rankingbtn.svg";
import spinner from "../../assets/images/spinner1.svg";
import { Link, useLocation } from "react-router-dom";
import { useEffect, useState, useContext } from "react";
import { auth, database } from "../../firebase/config"; // Firebase services
import { doc, getDoc, updateDoc, setDoc } from "firebase/firestore"; // Firestore functions
import { format } from "date-fns";
import { UserContext } from "../../context/UserContext";

import axios from "axios";

export const Game = () => {
  const location = useLocation(); // interoperability between othher page componets
  const { timer } = location.state || { timer: 30 }; // in default to 30 seconds if not provided

  const [username, setUsername] = useState("Fetching..."); // virtual identity and interoperability
  const [timeLeft, setTimeLeft] = useState(timer); // event-driven programming
  const [questionImage, setQuestionImage] = useState(null); // interoperability  main 1 the banana API
  const [solution, setSolution] = useState(null); // interoperability  main 1 the banana API
  const [loading, setLoading] = useState(true); // for quiz question fetching loading? display loading : display the quiz
  const [userAnswer, setUserAnswer] = useState(""); // to set user input  // event-driven Programming
  const [feedback, setFeedback] = useState(""); // event-driven Programming
  const [points, setPoints] = useState(0); //  store user points  // virtual identity // enven-driven programing
  const [isPaused, setIsPaused] = useState(false); //Event-riven Programming // track time pause when handle submit answer
  const [canProceed, setCanProceed] = useState(false); // allowed to proceed to the next quiz or no // Event-Driven programming
  const [calculationTime, setCalculationTime] = useState(null); // store calculation time fo the player  //Event-Driven Programing

  const [randomNumber, setRandomNumber] = useState("00"); // for random number generated by API // interoperability
  const [correctCount, setCorrectCount] = useState(0); // track correct answer count - to activate spinner(wheel) // Event-Driven Programming
  const [spinnerActive, setSpinnerActive] = useState(false); // track spinners state and reest random number state // Event-Driven Programming

  const firebaseUser = useContext(UserContext);

  const getCurrentUserId = () => {
    if (auth.currentUser) {
      return auth.currentUser.uid; // Firebase user
    }
    return null;
  };

  useEffect(() => {
    const recordLastMatchDate = async () => {
      try {
        const userId = getCurrentUserId();
        if (userId) {
          const userDocRef = doc(database, "users", userId);
          const currentDate = format(new Date(), "yyyy-MM-dd HH:mm:ss");
          await setDoc(
            userDocRef,
            { lastMatchDate: currentDate },
            { merge: true }
          );
          console.log("Last match date recorded:", currentDate);
        }
      } catch (error) {
        console.error("Error recording last match date:", error);
      }
    };

    recordLastMatchDate();
  }, [firebaseUser]);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const userId = getCurrentUserId();
        if (userId) {
          const userDocRef = doc(database, "users", userId);
          const userDoc = await getDoc(userDocRef);

          if (userDoc.exists()) {
            const userData = userDoc.data();
            setUsername(userData.username || "");
            setPoints(userData.points || 0);
          } else {
            setUsername("Unknown User");
            setPoints(0);
          }
        } else {
          setUsername("Guest");
          setPoints(0);
        }
      } catch (error) {
        console.error("Error fetching user data:", error);
        setUsername("Error fetching username");
        setPoints(0);
      }
    };

    fetchUserData();
  }, [firebaseUser]);

  const incrementPoints = async () => {
    try {
      const userId = getCurrentUserId();
      if (userId) {
        const userDocRef = doc(database, "users", userId);
        const newPoints = points + 10;
        await updateDoc(userDocRef, { points: newPoints });
        setPoints(newPoints);
      }
    } catch (error) {
      console.error("Error updating points:", error);
    }
  };

  // Interoperability 2
  const fetchRandomNumber = async () => {
    try {
      const response = await axios.get(
        "/api/v1.0/random?min=10&max=100&count=1"
      );
      console.log(response.data);
      const resdata = response.data[0].toString();
      setRandomNumber(resdata);

      // Update points with the fetched random number
      await updatePointsWithRandomNumber(resdata);
    } catch (error) {
      console.error("Error fetching random number:", error);
    }
  };

  const updatePointsWithRandomNumber = async (randomPoints) => {
    try {
      const userId = getCurrentUserId();
      if (userId) {
        const userDocRef = doc(database, "users", userId);

        const newPoints = points + parseInt(randomPoints, 10); // Add random points
        await updateDoc(userDocRef, { points: newPoints }); // Update Firestore
        setPoints(newPoints); // Update state
      }
    } catch (error) {
      console.error("Error updating points with random number:", error);
    }
  };

  useEffect(() => {
    if (timeLeft <= 0 || isPaused) return;

    const countdown = setInterval(() => {
      setTimeLeft((prevTime) => prevTime - 1);
    }, 1000);

    return () => clearInterval(countdown);
  }, [timeLeft, isPaused]);

  useEffect(() => {
    if (timeLeft === 0 && !isPaused) {
      setFeedback("Your calculation speed is too slow, practice more !!!");
      setIsPaused(true); // Stop the timer once it hits 0
    }
  }, [timeLeft, isPaused]);

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes.toString().padStart(2, "0")}:${secs
      .toString()
      .padStart(2, "0")}`;
  };

  //interoperability 01
  const fetchQuestion = async () => {
    try {
      setLoading(true);
      const response = await fetch("https://marcconrad.com/uob/banana/api.php");
      const data = await response.json();
      setQuestionImage(data.question);
      setSolution(data.solution);
      setTimeLeft(timer);
      setFeedback("");
      setIsPaused(false);
      setCanProceed(false);
      setCalculationTime(null); // Reset calculation time for the next quiz
    } catch (error) {
      console.error("Failed to fetch API:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchQuestion();
  }, []);

  const handleSubmit = () => {
    if (!userAnswer) {
      setFeedback("Please enter a number!");
      return;
    }

    if (parseInt(userAnswer, 10) === solution) {
      // 10 ensures decimal number
      setFeedback("Correct! ðŸŽ‰");
      incrementPoints();
      setIsPaused(true); // Stop the timer
      setCanProceed(true);
      setCalculationTime(timer - timeLeft);
      setCorrectCount(correctCount + 1); // Increment correct count

      if (correctCount + 1 === 3) {
        fetchRandomNumber(); // Fetch a random number on correct answer
        setSpinnerActive(true); // Activate spinner
        setCorrectCount(0); // Reset correct count after 3 correct answers
      }

      if (spinnerActive) {
        // Reset spinner state after random number is generated
        setSpinnerActive(false);
        setRandomNumber("00"); // Reset random number
      }
    } else {
      setFeedback("Wrong! ðŸ˜ž");
    }

    setUserAnswer("");
  };

  const handleNextQuiz = () => {
    if (!canProceed) {
      setFeedback("Answer this quiz first to unlock the next quiz.");
      return;
    }
    setFeedback("");
    fetchQuestion();
  };

  return (
    <>
      <div className="container-game">
        <div className="header-back-game">
          <Link to="/">
            <img src={back} alt="Banana Login Signup" />
          </Link>
        </div>
        <div className="spinner">
          <div className="left-spinner-div">
            <img src={spinner} alt="spinner" />
            <p className="spinner-p-left">{randomNumber}</p>
          </div>
          <div className="right-spinner-div">
            <img src={spinner} alt="spinner" />
            <p className="spinner-p-right">{randomNumber}</p>
          </div>
        </div>
        <div className="game">
          <div className="header-game">
            <h1>Banana Rush</h1>
            <p>
              {firebaseUser === undefined
                ? "Loading..."
                : firebaseUser && firebaseUser.displayName
                ? firebaseUser.displayName
                : username}
            </p>
          </div>
          <div className="bananaAPI">
            <p className="timer">{formatTime(timeLeft)}</p>
            {loading ? (
              <p>Loading...</p>
            ) : (
              <img src={questionImage} alt="Quiz Question" />
            )}
            <p className="answer">{feedback}</p>
          </div>
        </div>
        <div className="score-container-main">
          <div className="score-container">
            <div className="left-content">
              <div className="number-input">
                <p>Enter the banana number: </p>
                <input
                  type="text"
                  pattern="[0-9]*"
                  inputMode="numeric"
                  value={userAnswer}
                  onChange={(e) =>
                    setUserAnswer(e.target.value.replace(/[^0-9]/g, ""))
                  }
                />
                <button className="user-input-submit" onClick={handleSubmit}>
                  SUBMIT
                </button>
                <button className="user-input-next" onClick={handleNextQuiz}>
                  Next Quiz
                </button>
              </div>
              <span className="point-container">
                <p>Total points: </p>
                <p className="points">{points}</p> {/* Display points */}
              </span>
              <span className="calculation">
                <p>Your calculation time: </p>
                <p className="time">
                  {calculationTime !== null
                    ? `${calculationTime} seconds`
                    : "N/A"}
                </p>
              </span>
            </div>
            <div className="right-content">
              <Link to="/ranking" className="rankbtn">
                <img src={rankingbtn} alt="rankbtn" />
              </Link>
            </div>
          </div>
        </div>
      </div>

      <div className="footer-game">
        <p>V1.0</p>
        <p>made by: Rosni Farook</p>
      </div>
    </>
  );
};
